// GENERATED CODE - DO NOT MODIFY BY HAND
// This code was generated by ObjectBox. To update it run the generator again
// with `dart run build_runner build`.
// See also https://docs.objectbox.io/getting-started#generate-objectbox-code

// ignore_for_file: camel_case_types, depend_on_referenced_packages
// coverage:ignore-file

import 'dart:typed_data';

import 'package:flat_buffers/flat_buffers.dart' as fb;
import 'package:objectbox/internal.dart'
    as obx_int; // generated code can access "internal" functionality
import 'package:objectbox/objectbox.dart' as obx;
import 'package:objectbox_flutter_libs/objectbox_flutter_libs.dart';

import 'models/track.dart';

export 'package:objectbox/objectbox.dart'; // so that callers only have to import this file

final _entities = <obx_int.ModelEntity>[
  obx_int.ModelEntity(
      id: const obx_int.IdUid(1, 4810691331485070816),
      name: 'Track',
      lastPropertyId: const obx_int.IdUid(13, 545978304038549274),
      flags: 0,
      properties: <obx_int.ModelProperty>[
        obx_int.ModelProperty(
            id: const obx_int.IdUid(1, 3912121030096502859),
            name: 'id',
            type: 6,
            flags: 129),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(2, 7423643678348096998),
            name: 'filePath',
            type: 9,
            flags: 2080,
            indexId: const obx_int.IdUid(1, 6021391348314730205)),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(3, 759464259765673022),
            name: 'fileName',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(4, 5394030504563815917),
            name: 'fileLastModified',
            type: 10,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(5, 8954593062369846334),
            name: 'title',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(6, 2211192380553340196),
            name: 'artist',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(7, 1029935180016040375),
            name: 'album',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(8, 1966638548942276706),
            name: 'year',
            type: 6,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(9, 7328033861079498065),
            name: 'albumArt',
            type: 23,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(10, 5818632799779148717),
            name: 'genre',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(11, 829866455504761161),
            name: 'bitrate',
            type: 6,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(12, 1583432758962991661),
            name: 'playCount',
            type: 6,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(13, 545978304038549274),
            name: 'fileDuration',
            type: 6,
            flags: 0)
      ],
      relations: <obx_int.ModelRelation>[],
      backlinks: <obx_int.ModelBacklink>[])
];

/// Shortcut for [obx.Store.new] that passes [getObjectBoxModel] and for Flutter
/// apps by default a [directory] using `defaultStoreDirectory()` from the
/// ObjectBox Flutter library.
///
/// Note: for desktop apps it is recommended to specify a unique [directory].
///
/// See [obx.Store.new] for an explanation of all parameters.
///
/// For Flutter apps, also calls `loadObjectBoxLibraryAndroidCompat()` from
/// the ObjectBox Flutter library to fix loading the native ObjectBox library
/// on Android 6 and older.
Future<obx.Store> openStore(
    {String? directory,
    int? maxDBSizeInKB,
    int? maxDataSizeInKB,
    int? fileMode,
    int? maxReaders,
    bool queriesCaseSensitiveDefault = true,
    String? macosApplicationGroup}) async {
  await loadObjectBoxLibraryAndroidCompat();
  return obx.Store(getObjectBoxModel(),
      directory: directory ?? (await defaultStoreDirectory()).path,
      maxDBSizeInKB: maxDBSizeInKB,
      maxDataSizeInKB: maxDataSizeInKB,
      fileMode: fileMode,
      maxReaders: maxReaders,
      queriesCaseSensitiveDefault: queriesCaseSensitiveDefault,
      macosApplicationGroup: macosApplicationGroup);
}

/// Returns the ObjectBox model definition for this project for use with
/// [obx.Store.new].
obx_int.ModelDefinition getObjectBoxModel() {
  final model = obx_int.ModelInfo(
      entities: _entities,
      lastEntityId: const obx_int.IdUid(1, 4810691331485070816),
      lastIndexId: const obx_int.IdUid(1, 6021391348314730205),
      lastRelationId: const obx_int.IdUid(0, 0),
      lastSequenceId: const obx_int.IdUid(0, 0),
      retiredEntityUids: const [],
      retiredIndexUids: const [],
      retiredPropertyUids: const [],
      retiredRelationUids: const [],
      modelVersion: 5,
      modelVersionParserMinimum: 5,
      version: 1);

  final bindings = <Type, obx_int.EntityDefinition>{
    Track: obx_int.EntityDefinition<Track>(
        model: _entities[0],
        toOneRelations: (Track object) => [],
        toManyRelations: (Track object) => {},
        getId: (Track object) => object.id,
        setId: (Track object, int id) {
          object.id = id;
        },
        objectToFB: (Track object, fb.Builder fbb) {
          final filePathOffset = fbb.writeString(object.filePath);
          final fileNameOffset = fbb.writeString(object.fileName);
          final titleOffset =
              object.title == null ? null : fbb.writeString(object.title!);
          final artistOffset =
              object.artist == null ? null : fbb.writeString(object.artist!);
          final albumOffset =
              object.album == null ? null : fbb.writeString(object.album!);
          final albumArtOffset = object.albumArt == null
              ? null
              : fbb.writeListInt8(object.albumArt!);
          final genreOffset =
              object.genre == null ? null : fbb.writeString(object.genre!);
          fbb.startTable(14);
          fbb.addInt64(0, object.id);
          fbb.addOffset(1, filePathOffset);
          fbb.addOffset(2, fileNameOffset);
          fbb.addInt64(3, object.fileLastModified.millisecondsSinceEpoch);
          fbb.addOffset(4, titleOffset);
          fbb.addOffset(5, artistOffset);
          fbb.addOffset(6, albumOffset);
          fbb.addInt64(7, object.year);
          fbb.addOffset(8, albumArtOffset);
          fbb.addOffset(9, genreOffset);
          fbb.addInt64(10, object.bitrate);
          fbb.addInt64(11, object.playCount);
          fbb.addInt64(12, object.fileDuration);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (obx.Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final idParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0);
          final filePathParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 6, '');
          final fileNameParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 8, '');
          final fileLastModifiedParam = DateTime.fromMillisecondsSinceEpoch(
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 10, 0));
          final fileDurationParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 28, 0);
          final titleParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 12);
          final artistParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 14);
          final albumParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 16);
          final yearParam =
              const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 18);
          final albumArtParam = const fb.Uint8ListReader(lazy: false)
              .vTableGetNullable(buffer, rootOffset, 20) as Uint8List?;
          final genreParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 22);
          final bitrateParam =
              const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 24);
          final playCountParam =
              const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 26);
          final object = Track(
              id: idParam,
              filePath: filePathParam,
              fileName: fileNameParam,
              fileLastModified: fileLastModifiedParam,
              fileDuration: fileDurationParam,
              title: titleParam,
              artist: artistParam,
              album: albumParam,
              year: yearParam,
              albumArt: albumArtParam,
              genre: genreParam,
              bitrate: bitrateParam,
              playCount: playCountParam);

          return object;
        })
  };

  return obx_int.ModelDefinition(model, bindings);
}

/// [Track] entity fields to define ObjectBox queries.
class Track_ {
  /// See [Track.id].
  static final id = obx.QueryIntegerProperty<Track>(_entities[0].properties[0]);

  /// See [Track.filePath].
  static final filePath =
      obx.QueryStringProperty<Track>(_entities[0].properties[1]);

  /// See [Track.fileName].
  static final fileName =
      obx.QueryStringProperty<Track>(_entities[0].properties[2]);

  /// See [Track.fileLastModified].
  static final fileLastModified =
      obx.QueryDateProperty<Track>(_entities[0].properties[3]);

  /// See [Track.title].
  static final title =
      obx.QueryStringProperty<Track>(_entities[0].properties[4]);

  /// See [Track.artist].
  static final artist =
      obx.QueryStringProperty<Track>(_entities[0].properties[5]);

  /// See [Track.album].
  static final album =
      obx.QueryStringProperty<Track>(_entities[0].properties[6]);

  /// See [Track.year].
  static final year =
      obx.QueryIntegerProperty<Track>(_entities[0].properties[7]);

  /// See [Track.albumArt].
  static final albumArt =
      obx.QueryByteVectorProperty<Track>(_entities[0].properties[8]);

  /// See [Track.genre].
  static final genre =
      obx.QueryStringProperty<Track>(_entities[0].properties[9]);

  /// See [Track.bitrate].
  static final bitrate =
      obx.QueryIntegerProperty<Track>(_entities[0].properties[10]);

  /// See [Track.playCount].
  static final playCount =
      obx.QueryIntegerProperty<Track>(_entities[0].properties[11]);

  /// See [Track.fileDuration].
  static final fileDuration =
      obx.QueryIntegerProperty<Track>(_entities[0].properties[12]);
}
